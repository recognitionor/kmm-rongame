insertAttend:
INSERT OR REPLACE
INTO AttendEntity(
    date
) VALUES ( ?);

getAttendList:
SELECT *
FROM AttendEntity
ORDER BY id ASC;



getCommonInfo:
SELECT *
FROM CommonEntity
ORDER BY id ASC;

insertCommon:
INSERT OR REPLACE
INTO CommonEntity(
    id,
    token,
    expires
) VALUES (1,?, ?);


getUserInfo:
SELECT *
FROM UserInfoEntity
ORDER BY id ASC;

insertUser:
INSERT OR REPLACE
INTO UserInfoEntity(
    id,
    name,
    money,
    cardStage
) VALUES (1,?, ?,?);

updateUser:
UPDATE UserInfoEntity
SET money = ?
WHERE id = 1;

nextCardStage:
UPDATE UserInfoEntity
SET cardStage = cardStage + 1
WHERE id = 1;


minusUserMoney:
UPDATE UserInfoEntity
SET money = money - ?
WHERE id = 1;

plusUserMoney:
UPDATE UserInfoEntity
SET money = money + ?
WHERE id = 1;

insertCardCombineEntity:
INSERT OR REPLACE INTO CardCombineEntity(
    id,
    item1,
    item2,
    result
) VALUES (?,?, ?, ?);

getCardCombine:
SELECT *
FROM CardCombineEntity
WHERE id = ?;

getCardCombineList:
SELECT *
FROM CardCombineEntity
ORDER BY id ASC;

insertCardTypeEntity:
INSERT OR REPLACE INTO CardTypeEntity(
    id,
    name,
    strongList
) VALUES (?,?, ?);

getCardType:
SELECT *
FROM CardTypeEntity
WHERE CardTypeEntity.id = ?;

getCardTypeList:
SELECT *
FROM CardTypeEntity
ORDER BY CardTypeEntity.id ASC;

insertCardInfoEntity:
INSERT OR REPLACE INTO CardInfoEntity(
    id,
    name,
    nameEng,
    grade,
    image,
    description,
    type
) VALUES (?,?,?,?,?,?,?);

getCardInfo:
SELECT *
FROM CardInfoEntity
WHERE id = ?;

getCardInfoFromName:
SELECT *
FROM CardInfoEntity
WHERE name = ?;

getCardInfoList:
SELECT *
FROM CardInfoEntity;

getCardInfoRandom:
SELECT *
FROM CardInfoEntity
WHERE grade <= ?
ORDER BY RANDOM()
LIMIT 1;


myCardList:
SELECT MyCardEntity.*,
    CardInfoEntity.description,
    CardInfoEntity.image,
    CardInfoEntity.name,
    CardInfoEntity.grade,
    CardInfoEntity.nameEng,
    CardInfoEntity.type
FROM MyCardEntity
LEFT JOIN CardInfoEntity ON MyCardEntity.cardId = CardInfoEntity.id
ORDER BY MyCardEntity.id ASC;

getMyCard:
SELECT MyCardEntity.*,
           CardInfoEntity.id AS cardId,
           CardInfoEntity.description,
           CardInfoEntity.image,
           CardInfoEntity.name,
           CardInfoEntity.grade,
           CardInfoEntity.nameEng,
           CardInfoEntity.type
FROM MyCardEntity
LEFT JOIN CardInfoEntity ON MyCardEntity.cardId = CardInfoEntity.id
WHERE MyCardEntity.id = ?;

getCardCount:
SELECT COUNT(*)
FROM MyCardEntity
WHERE MyCardEntity.cardId = ?;


insertCardEntity:
INSERT INTO MyCardEntity(
    cardId,
    potential,
    upgrade,
    power
) VALUES (?,?,?,?);

upgradeCard:
UPDATE MyCardEntity
SET upgrade = upgrade + 1,
    power = ?
WHERE id = ?;

removeCard:
DELETE FROM MyCardEntity
WHERE id = ?;

updateQuizAnswer:
UPDATE QuizEntity
SET selected = ?, durationTime = ?, status = 1
WHERE id =?;

updateQuizContent:
UPDATE QuizEntity
SET answer = ?,
    category = ?,
    chance = ?,
    choiceList = ?,
    description = ?,
    imageUrl = ?,
    level = ?,
    time = ?,
    question = ?,
    reward =?
WHERE id =?;

insertQuizEntity:
INSERT  OR REPLACE INTO QuizEntity(
    id,
    category,
    level,
    imageUrl,
    answer,
    question,
    choiceList,
    time,
    chance,
    reward,
    description,
    selected,
    durationTime,
    status
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?);

getQuizListAll:
  SELECT *
  FROM QuizEntity;

getQuizList:
WITH TrueQuizzes AS (
  SELECT *
  FROM QuizEntity
  WHERE status = 1
  ORDER BY RANDOM()
  LIMIT 3
),
FalseQuizzes AS (
  SELECT *
  FROM QuizEntity
  WHERE status = 0
  ORDER BY RANDOM()
  LIMIT 3
)
SELECT * FROM FalseQuizzes
UNION ALL
SELECT * FROM TrueQuizzes
LIMIT 3;


getBank:
SELECT *
FROM BankEntity
WHERE id = ?;

getBankHistory:
SELECT *
FROM BankHistoryEntity
WHERE bank_id = ?
ORDER BY date DESC;

insertBank:
INSERT OR REPLACE
INTO BankEntity(
    id,
    name,
    date,
    interestRate
) VALUES (?,?, ?,?);

insertBankHistory:
INSERT OR REPLACE
INTO BankHistoryEntity(
    bank_id,
    amount,
    interestRate,
    date
) VALUES (?, ?,?, ?);

updateBankInterestRate:
UPDATE BankEntity
SET interestRate = ?, date =?
WHERE id = ?;

removeBankHistory:
DELETE FROM BankHistoryEntity
WHERE id = ?;


insertCardPadigree:
INSERT OR REPLACE
INTO CardPadigreeEntity(
    cardId,
    itemId1,
    itemId2,
    percent,
    count
) VALUES (?,?,?,?,?);

addCountCardPadigreeEntity:
UPDATE CardPadigreeEntity
SET count = count + 1
WHERE  cardId= ?;

getCardPadigreeList:
SELECT *
FROM CardPadigreeEntity
ORDER BY id ASC;

addCountCardInfo:
UPDATE CardInfoEntity
SET count = count + 1
WHERE id = ?;

existCardPadigree:
SELECT EXISTS (
    SELECT 1
    FROM CardPadigreeEntity
    WHERE cardId = ? AND itemId1 = ? AND itemId2 = ?
) AS existCardPadigree;


updateCardCollectorEntity:
UPDATE CardCollectorEntity
SET isDone = 1
WHERE id = ?;

getCardCollectList:
SELECT *
    FROM CardCollectorEntity
    ORDER BY isDone DESC;

insertCardCollectorEntity:
INSERT
INTO CardCollectorEntity(
    cardId,
    count,
    grade,
    reward,
    power,
    upgrade
) VALUES (?,?,?,?, ?, ?);

deleteCardCollectorEntity:
DELETE FROM CardCollectorEntity
WHERE id = ?;


insertDBVersion:
INSERT
INTO DBVersionEntity(
    version,
    type,
    isDone
) VALUES (?,?,?);


getVersion:
    SELECT *
        FROM DBVersionEntity
        WHERE type = ? AND version = ? AND isDone = 1;

getVersionList:
    SELECT *
        FROM DBVersionEntity;