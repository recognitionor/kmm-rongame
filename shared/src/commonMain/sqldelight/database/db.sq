import kotlin.Boolean;

CREATE TABLE testEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    test TEXT NOT NULL
);

getTestList:
SELECT *
FROM testEntity
ORDER BY id ASC;

--AttendEntity
--출석 정보--
CREATE TABLE AttendEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    date INTEGER NOT NULL UNIQUE
);

insertAttend:
INSERT OR REPLACE
INTO AttendEntity(
    date
) VALUES ( ?);

getAttendList:
SELECT *
FROM AttendEntity
ORDER BY id ASC;

--UserInfoEntity
--유저 정보--
CREATE TABLE UserInfoEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    money INTEGER
);

getUserInfo:
SELECT *
FROM UserInfoEntity
ORDER BY id ASC;

insertUser:
INSERT OR REPLACE
INTO UserInfoEntity(
    id,
    name,
    money
) VALUES (1,?, ?);

updateUser:
UPDATE UserInfoEntity
SET money = ?
WHERE id = 1;

minusUserMoney:
UPDATE UserInfoEntity
SET money = money - ?
WHERE id = 1;

plusUserMoney:
UPDATE UserInfoEntity
SET money = money + ?
WHERE id = 1;
--CardEntity
--카드 정보--
--/*

-- */
CREATE TABLE CardEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    cost INTEGER,
    grade INTEGER,
    image TEXT,
    type TEXT NOT NULL,
    attack INTEGER,
    defense INTEGER,
    speed INTEGER,
    hp INTEGER,
    mp INTEGER
);

getCardList:
SELECT *
FROM CardEntity
ORDER BY id ASC;

insertCardEntity:
INSERT INTO CardEntity(
    name,
    cost,
    grade,
    image,
    type,
    attack,
    defense,
    speed,
    hp,
    mp
) VALUES (?,?,?,?,?,?,?,?,?,?);

CREATE TABLE QuizEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    category TEXT NOT NULL,
    level INTEGER,
    imageUrl TEXT NOT NULL,
    answer INTEGER,
    question TEXT NOT NULL,
    choiceList TEXT NOT NULL,
    time INTEGER,
    chance INTEGER,
    reward INTEGER,
    description TEXT NOT NULL,
    selected INTEGER,
    durationTime INTEGER,
    status INTEGER AS Boolean

);

insertQuizEntity:
INSERT  OR REPLACE INTO QuizEntity(
    id,
    category,
    level,
    imageUrl,
    answer,
    question,
    choiceList,
    time,
    chance,
    reward,
    description,
    selected,
    durationTime,
    status
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?);

getQuizList:
SELECT *
FROM QuizEntity
ORDER BY RANDOM()
LIMIT 3;

-- */
CREATE TABLE BankEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    account INTEGER NOT NULL,
    interestRate INTEGER NOT NULL
);

CREATE TABLE BankHistoryEntity (
    bank_id INTEGER NOT NULL REFERENCES BankEntity(id),
    amount INTEGER NOT NULL,
    date INTEGER NOT NULL
);

getBank:
SELECT *
FROM BankEntity
WHERE id = ?;

getBankHistory:
SELECT *
FROM BankHistoryEntity
WHERE bank_id = ?
ORDER BY date DESC;

insertBank:
INSERT OR REPLACE
INTO BankEntity(
    id,
    name,
    account,
    interestRate
) VALUES (?,?, ?,?);

insertBankHistory:
INSERT OR REPLACE
INTO BankHistoryEntity(
    bank_id,
    amount,
    date
) VALUES (?, ?,?);

depositBankAccount:
UPDATE BankEntity
SET account = account + ?
WHERE id = ?;

withdrawBankAccount:
UPDATE BankEntity
SET account = account - ?
WHERE id = ?;

updateBankInterestRate:
UPDATE BankEntity
SET interestRate = ?
WHERE id = ?;

